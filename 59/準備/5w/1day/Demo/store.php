Dockerのsrcフォルダのobject.phpに書いてるけど
demoの時はstore.phpを作成して書いていきます。

<?php
  // ➀<!-- クラスを作成します -->
  class Store
  {
    // ➁<!-- これを属性値、つまりデータをセットしています -->
      public $name;

    // ➂<!-- 次にこのクラスがもつ技を登録しましょう -->
    // <!-- 今回はStore、お店だから、sell(売る)という技を登録します -->  
    // <!-- これがメソッドというもので、関数だと思っておけば良いです。 -->
      public function sell($item)
      {
        // <!-- 技の中身、どんな技にするか -->
          echo $item.'を売ります';
      }
    
      // ⑧
    // public function __construct($name)
    // {
    //   $this->name = $name;
    // }
      // これはコンストラクタといって、インスタンスを生成したら
      // 生成と同時にこの技が呼び出されます。
      // $store->name = 'サイゼリア';
      // これをコメントアウトして,$store = new Store();これに店の名前を書こう

  }
    
  //➃インスタンスを作成しましょう。実際にお店を作ります
  //⑧引数に日産とかく
  $store = new Store();
  
  // ⑤ではクラスにセットしたプロパティにこのインスタンスのデータをセットをしましょう
  // ⑧下の行をコメントアウト
  $store->name = '日産';
  echo $store->name;
  echo "<br>";

  //➅先ほど何かを売るという技をセットしたのですが、日産で売るものを決めましょう
  //ここではGTRを売りましょう
  $store->sell('GTR');
  // ここで一度画面を表示させましょう
  
  //ここまでの流れを確認しましょう
  //クラス==設計書を作成
  //クラスには属性(データ)と技であるメソッド(振る舞い)を書いておく
  //設計書を元に実際にモノ(object)を作る→インスタンス
  //作ったものに対してクラスで定義したデータをセットしたり、技を呼び出す
  // 基本的にはこの流れです。

  // ⑦ここでもう1ステップ
  // コンスタトラクタというモノを学びましょう
  // コンストラクタはインスタンスが生まれたと同時に実行されるメソッドです。
  // 実際に書いてみましょう

  // ➈継承を学んでみましょう
    //  お店を作ったはいいけど、レストランも作りたくなってしまった
    //  でもレストランって店の名前が必要だし、何を売るのか書きたいな
    //  そういえば車を売るときと処理は同じではないか？
    //  コード書くの面倒だし、引き継ぎしよう
    echo "<br>";

    // ⑩
    // class Restaurant extends Store
    // {
    //     引き継いでるから設計書は何も書かないよ!
    // }
    
    //⑪ レストランを作りましょう
    // $restaurant = new Restaurant('サイゼリア');
    // echo $restaurant->name;
    // echo '<br>';

    //⑫ 
    // $restaurant->sell('パスタ');

    // private

    // is a 関係 
    // has many
